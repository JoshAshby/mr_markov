require_relative '../mr_markov'

class WorkerScheduler < Scheduler
  def on_tick
    MrMarkov.logger.debug "Loading chronotriggers ..."
    chronotriggers = Chronotrigger.where{ last_ran + repeat_delta <= Time.current.to_i }

    chronotriggers.each do |chronotrigger|
      MrMarkov.logger.debug "Running chronotrigger for #{ chronotrigger.job_klass }"

      klass = Object.const_get chronotrigger.job_klass

      klass.new.async.send chronotrigger.job_function, chronotrigger.job_arguments

      chronotrigger.update last_ran: chronotrigger.last_ran + chronotrigger.repeat_delta
      chronotrigger.save
    end
  end
end

s = WorkerScheduler.new
s.start!
s.defer

trap("INT"){ exit }
